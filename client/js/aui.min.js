Vue.component("aui-button",{template:`\n        <button class="btn aui" :disabled="loading" @click="$emit('click')">\n            <span v-if="isDelayed()">\n                <i class="fa fa-spin fa-circle-notch loading-icon"></i>\n                <span v-if="has_loading_text" class="loading-text">{{loading_text}}</span>\n                <slot v-else></slot>\n            </span>\n            <slot v-else></slot>\n        </button>`,props:{loading:{type:Boolean,default:false},loading_text:{type:String,default:null}},methods:{isDelayed(){if(this.loading){setTimeout(()=>{if(this.loading)this.show_spinner=true},100)}else{this.show_spinner=false}return this.show_spinner}},computed:{has_loading_text(){return typeof this.loading_text==="string"}},data:function(){return{show_spinner:false}}});Vue.component("aui-button-drop",{template:`\n        <button class="aui btn btn-dropdown" @click="menu_active = !menu_active" @focusout="menu_active = false" @touchleave="menu_active = false">\n            <span v-if="$slots.default"><slot></slot></span>\n            <i :class="icon_classes"></i>\n            <ul class="dropdown-menu" :class="menu_align" v-if="menu_active">\n                <li v-for="option in options" @click="doAction(option.action)">{{option.label}}</li>\n            </ul>\n        </button>`,props:{classes:{type:String},options:{type:Array,required:true},label:{type:String},icon_classes:{type:String,default:"fa fa-bars"},menu_align:{style:String,default:"left",validator:prop=>{if(prop==="left"||prop==="right")return true;else{console.log("AUI-BUTTON: Menu alignment can only be left or right.");return false}}}},data:function(){return{menu_active:false}},methods:{doAction(action){if(typeof action==="string"){window.open(action)}else if(typeof action==="function"){action()}else{console.log("AUI-BTN-DROPDOWN: Action passed to button click is not string or function; type: "+typeof action)}},hide(event){this.menu_active=false},setActive(tab){this.options.forEach(option=>{option.active=false});tab.active=true}}});Vue.component("aui-table",{template:` \n    <div class="aui table-container">\n        <div class="input-aligner" :class="search_align">\n            <aui-input v-if="search" id="table-search" v-model="search_term" :value="search_term" placeholder="Search..."></aui-input>\n        </div>\n        <table class="table">\n            <thead>\n                <tr v-if="headers">\n                    <th v-for="header in headers">\n                        {{header}}\n                    </th>\n                </tr>\n                <tr v-else>\n                    <th v-for="(value, key) in current_data[0].values" v-if="subsetAllowed(key)">\n                        {{key}}\n                    </th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr v-for="element in current_data" v-if="element.action" @click="element.action">\n                    <td v-for="(value, key) in element.values" v-if="subsetAllowed(key)">\n                        {{value}}\n                    </td>\n                </tr>\n                <tr v-for="element in current_data" v-if="!element.action">\n                    <td v-for="(value, key) in element.values" v-if="subsetAllowed(key)">\n                        {{value}}\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n        <div class="no-data" if="current_data.length === 0">No Data</div>\n    </div>\n    `,props:{data:{type:Array,required:true},subset:{type:Array,default:null},headers:{type:Array},search:{type:Boolean},search_value:{type:String},search_align:{type:String,default:"right",validator:prop=>{if(prop==="left"||prop==="right")return true;else{console.log("AUI-TOGGLE: Label location can only be left, right, top, or bottom.");return false}}}},data:function(){return{current_data:this.data,search_term:this.search_value}},watch:{search_term(){let term=this.search_term.toLowerCase();this.current_data=this.data.filter(element=>{let found=false;element.forEach(value=>{let val=value.toString().toLowerCase();if(val.includes(term)){found=true}});return found});if(term==="")this.current_data=this.data}},methods:{subsetAllowed(key){if(this.subset===null){return true}else{return this.subset.includes(key)}}}});Vue.component("aui-input",{template:`\n    <div :id="id + '-container'" class="aui input-container">\n        <label :for="id" v-if="title">{{title}}</label>\n        <div class="input-block" :class="capsClass()">\n            <div class="leading-element edge-element" :class="classFailure() + classSuccess()" v-if="leading_text">{{leading_text}}</div>\n            <input :id="id"\n                :type="type" \n                :name="name"\n                :placeholder="placeholder"\n                :disabled="disabled"\n                :readonly="readonly"\n                :class="classes + classFailure() + classSuccess()"\n                :value="value"\n                :min="dateMinimum()"\n                :max="dateMaximum()"\n                :autocomplete="autocomplete"\n                @keydown="$emit('keydown', $event.target)"\n                @change="$emit('change', $event.target)"\n                @focus="$emit('focus', $event.target)"\n                @blur="$emit('blur', $event.target)"\n                @input="$emit('input', $event.target.value)"\n            >\n            <div class="trailing-element edge-element" :class="classFailure() + classSuccess()" v-if="trailing_text">{{trailing_text}}</div>\n        </div>\n        <div class="aui subtext" :class="subtextColorClass()" v-if="subtext">{{subtext}}</div>\n    </div>`,props:{id:{type:String,required:true},title:{type:String},name:{type:String},type:{type:String,default:"text"},subtext:{type:String},placeholder:{type:String},leading_text:{type:String},trailing_text:{type:String},classes:{type:String,default:""},allowed:{type:String,validator:prop=>{if(prop===""||prop==="right"||prop==="top"||prop==="bottom")return true;else{console.log("ERROR - AUI-INPUT: Allowed prop can only be 'whole', 'number', or 'text'.");return false}}},disabled:{type:Boolean},readonly:{type:Boolean},success:{type:Boolean},failure:{default:false},list:{type:String},value:{type:String|Number},min:{type:String|Number},max:{type:String|Number},autocomplete:{type:String,default:"on"}},data:function(){return{}},methods:{classSuccess(){return this.success?" border-success":""},classFailure(){return this.failure?" border-failure":""},subtextColorClass(){if(this.success)return"text-success";if(this.failure)return"text-failure";return""},capsClass(){if(this.leading_text||this.trailing_text)return" caps"},dateMinimum(){if(this.min==="today"){let today=(new Date).toISOString().slice(0,10);return today}else{return this.min}},dateMaximum(){if(this.max==="today"){let today=(new Date).toISOString().slice(0,10);return today}else{return this.max}}}});Vue.component("aui-select",{template:`\n    <div :id="id + '-container'" class="aui select-container">\n        <label :for="id" v-if="title">{{title}}</label>\n        <div class="select-block">\n            <select \n                :name="name" \n                :id="id" \n                :class="classes" \n                :value="value" \n                :disabled="disabled" \n                @input="$emit('input', $event.target.value)" \n                @change="$emit('change', $event.target.value)"\n            >\n                <option v-if="us_states" v-for="(element, key) in states" :value="key" :selected="isSelected(key)">{{element}}</option>\n                <option v-if="!us_states" v-for="(element, key) in data" :value="key" :selected="isSelected(key)">{{element}}</option>\n            </select>\n        </div>\n        <div class="aui subtext" v-if="subtext" >{{subtext}}</div>\n    </div>`,props:{id:{type:String,required:true},data:{type:Array|Object},value:{type:Array|Object|String|Boolean|Number},title:{type:String},name:{type:String},subtext:{type:String},classes:{type:String,default:""},disabled:{type:Boolean,default:false},us_states:{type:Boolean,default:false}},data(){return{states:{0:"",AL:"Alabama",AK:"Alaska",AS:"American Samoa",AZ:"Arizona",AR:"Arkansas",CA:"California",CO:"Colorado",CT:"Connecticut",DE:"Delaware",DC:"District Of Columbia",FM:"Federated States Of Micronesia",FL:"Florida",GA:"Georgia",GU:"Guam",HI:"Hawaii",ID:"Idaho",IL:"Illinois",IN:"Indiana",IA:"Iowa",KS:"Kansas",KY:"Kentucky",LA:"Louisiana",ME:"Maine",MH:"Marshall Islands",MD:"Maryland",MA:"Massachusetts",MI:"Michigan",MN:"Minnesota",MS:"Mississippi",MO:"Missouri",MT:"Montana",NE:"Nebraska",NV:"Nevada",NH:"New Hampshire",NJ:"New Jersey",NM:"New Mexico",NY:"New York",NC:"North Carolina",ND:"North Dakota",MP:"Northern Mariana Islands",OH:"Ohio",OK:"Oklahoma",OR:"Oregon",PW:"Palau",PA:"Pennsylvania",PR:"Puerto Rico",RI:"Rhode Island",SC:"South Carolina",SD:"South Dakota",TN:"Tennessee",TX:"Texas",UT:"Utah",VT:"Vermont",VI:"Virgin Islands",VA:"Virginia",WA:"Washington",WV:"West Virginia",WI:"Wisconsin",WY:"Wyoming"}}},methods:{isSelected(key){return key==this.value}}});Vue.component("aui-datalist",{template:`\n        <div :id="id + '-container'" class="aui datalist-container">\n            <label :for="id" v-if="title">{{title}}</label>\n            <input \n                :id="id" \n                :name="name"\n                :type="type"\n                :placeholder="placeholder"\n                :disabled="disabled"\n                :readonly="readonly"\n                :value="value"\n                :class="classes + classFailure() + classSuccess()"\n                :list="id + '-datalist'"\n                :failure="failure"\n                :success="success"\n                @keydown="$emit('keydown')"\n                @focus="$emit('focus')"\n                @blur="$emit('blur')"\n                @input="$emit('input', $event.target.value)"\n            >\n            <div class="aui subtext" :class="subtextColorClass()" v-if="subtext">{{subtext}}</div>\n            \n            <datalist :id="id + '-datalist'">\n                <option v-for="option in current_options">{{option}}</option> \n            </datalist>\n        </div>\n    `,props:{id:{type:String,required:true},options:{type:Array|Object,required:true},validate:{type:Boolean,default:true},title:{type:String},classes:{type:String,default:""},name:{type:String},type:{type:String,default:"text"},placeholder:{type:String},disabled:{type:Boolean},readonly:{type:Boolean},success:{default:false},failure:{default:false},subtext:{type:String},value:{type:String|Number}},data:function(){return{show_menu:false,current_options:this.options,search_term:""}},watch:{search_term(){this.searchAndUpdate()},options(){this.searchAndUpdate()}},methods:{searchAndUpdate(){let term=this.search_term.toLowerCase();if(Array.isArray(this.options)){this.current_options=this.options.filter(element=>{let val=element.toString().toLowerCase();if(val.includes(term)){return true}});if(term==="")this.current_options=this.options}else{this.current_options=Object.keys(this.options).filter(element=>{let val=this.options[element].toString().toLowerCase();if(val.includes(term)){return true}}).reduce((obj,key)=>{obj[key]=this.options[key];return obj},{});if(term==="")this.current_options=this.options}if(Object.keys(this.current_options).length===0)this.current_options=["No options available"]},classSuccess(){return this.success?" border-success":""},classFailure(){return this.failure?" border-failure":""},subtextColorClass(){if(this.success)return"text-success";if(this.failure)return"text-failure";return""}}});Vue.component("aui-radio",{template:`\n    <div class="aui">\n        <label class="radio-container">\n            <slot></slot>\n            <input type="radio" :name="name" :checked="checked"  @change="$emit('input', $event.target.checked)">\n            <span class="radio"></span>\n        </label>\n    </div>`,props:{name:{type:String,required:true},checked:{type:Boolean}}});Vue.component("aui-checkbox",{template:`\n        <label class="aui check-container">\n            <slot></slot>\n            <input type="checkbox" :checked="checked" @change="$emit('input', $event.target.checked)">\n            <span class="checkmark"></span>\n        </label>\n        `,props:{checked:{type:Boolean}}});Vue.component("aui-toggle",{template:`\n    <div class="aui aui-toggle flex">\n        <span class="switch-container" :class="label_location">\n            <label>{{label}}</label>\n            <label class="switch">\n                <input type="checkbox" :checked="checked" @change="$emit('input', $event.target.checked)">\n                <span class="slider round"></span>\n            </label>\n        </span>\n    </div>`,props:{checked:{type:Boolean},label:{type:String},label_location:{type:String,default:"top",validator:prop=>{if(prop==="left"||prop==="right"||prop==="top"||prop==="bottom")return true;else{console.log("AUI-TOGGLE: Label location can only be left, right, top, or bottom.");return false}}}}});Vue.component("aui-tab",{template:`\n    <span class="aui tab" :class="getActiveClass()" @click="$emit('click'); doAction(action)">\n        {{label}}\n    </span>`,props:{active:{type:Boolean,required:true},label:{type:String,required:true},action:{type:String|Function},disabled:{type:Boolean,default:false}},methods:{getActiveClass(){let classes=this.active?"active":"";if(this.disabled){classes+=" disabled"}return classes},doAction(){if(this.disabled){return}if(typeof this.action==="string"){window.open(this.action)}else if(typeof this.action==="function"){this.action()}else{console.log("AUI-TAB: Action passed to click is not string or function; type: "+typeof this.action)}}}});Vue.component("aui-tabs",{template:`\n    <div class="aui tabs">\n        <aui-tab \n            v-for="(option, index) in options" \n            :key="index" :active="option.active" \n            :label="option.label" \n            :action="option.action"\n            :disabled="option.disabled"\n            @click="setActive(option)" \n            v-if="showTabs"\n        >\n        </aui-tab>\n        <aui-button-drop :options="options" v-if="!showTabs" menu_align="right">{{getActive()}}</aui-button-drop>\n    </div>`,props:{options:{type:Array}},data:function(){return{width:null,hideWidth:null,showTabs:true}},methods:{setActive(new_active){if(new_active.disabled){return}this.options.forEach(option=>{option.active=false});new_active.active=true},getActive(){let active=this.options.filter(option=>{if(option.active)return true});return active[0].label},manageOverflow(){window.requestAnimationFrame(()=>{this.showTabs=this.$el.clientWidth>=this.width})}},created:function(){window.addEventListener("resize",this.manageOverflow)},mounted:function(){this.width=0;this.$children.forEach(component=>{this.width=this.width+component.$el.offsetWidth+16});this.width=this.width+32;this.showTabs=this.$el.clientWidth>=this.width},destroyed:function(){window.removeEventListener("resize",this.manageOverflow)}});Vue.component("aui-alert",{template:`\n    <div class="aui alert" v-if="visible">\n        <span class="title-bar" v-if="title" >\n            <h4 class="alert-title">{{title}}</h4>\n            <i class="fa fa-times" v-if="close" @click="$emit('click')"></i>\n        </span>\n        <p v-if="title">\n            <slot></slot>\n        </p>\n        <p v-else>\n            <slot></slot>\n            <i class="fa fa-times" v-if="close" @click="$emit('click')"></i>\n        </p>\n    </div>`,props:{title:{type:String},close:{type:Boolean,default:true},visible:{default:true}}});Vue.component("aui-badge",{template:`<span class="aui badge"><slot></slot></span>`});Vue.component("aui-card",{template:`\n    <div class="aui card">\n        <div class="card-header">{{header}}</div>\n        <div class="card-body">\n            <h4>{{title}}</h4>\n            <p class="card-text">\n                <slot></slot>\n            </p>\n        </div>\n    </div>`,props:{header:{type:String,required:true},title:{type:String}}});Vue.component("aui-modal",{template:`\n    <div class="aui modal-container" v-if="state" @click.self="toggleEmit()">\n        <div class="modal">\n            <div v-if="title" class="modal-header" :class="title_classes">\n                <h4>{{title}}</h4>\n                <i class="fa fa-times" @click.self="toggleEmit()" v-if="close"></i>\n            </div>\n            <div class="modal-body">\n                <slot></slot>\n            </div>\n        </div>\n    </div>`,props:{state:{type:Boolean,required:true},title:{type:String},html:{type:String},close:{type:Boolean,default:true},title_classes:{type:String}},methods:{escEmit(event){if(event.keyCode===27){this.$emit("modal-close")}},toggleEmit(){if(this.close){this.$emit("modal-toggle")}}},watch:{state(){if(this.state){document.getElementById("ds-nav-container").style.zIndex="0";document.getElementById("ds-view-header").style.zIndex="-1";document.getElementById("ds-nav-container").classList.remove("ds-nav-show-mobile")}else{document.getElementById("ds-nav-container").style.zIndex="1";document.getElementById("ds-view-header").style.zIndex="0"}}},created:function(){if(this.close)document.addEventListener("keyup",this.escEmit)},destroyed:function(){if(this.close)document.removeEventListener("keyup",this.escEmit)}});Vue.component("aui-list-item",{template:`\n        <li class="aui list-item" :class="activeClass" @click="runCallback()">\n            <span class="text">\n                <div class="title"><slot></slot></div>\n                <div class="aui subtext" v-if="subtext">{{subtext}}</div>\n            </span>\n            <span class="icon" v-if="isActive()"></span>\n        </li>`,props:{callback:{type:Function},subtext:{type:String}},methods:{isActive(){return!!this.callback},runCallback(){if(this.callback)this.callback()}},computed:{activeClass(){return this.callback?" active":""}}});Vue.component("aui-list-group",{template:`\n    <ul class="aui list-group">\n        <aui-list-item v-for="(item, index) in data" :key="index" :callback="item.callback" :subtext="item.subtext">{{item.content}}</aui-list-item>\n    </ul>`,props:{data:{type:Array,required:true}}});Vue.component("aui-wysiwyg",{template:`\n    <div :id="id + '-container'" class="aui wysiwyg-container">\n        <title :for="id" class="wysiwyg-title">{{title}}</title>\n        <div :id="id"></div>\n    </div>`,props:{id:{type:String,required:true},title:{type:String},text:{default:""}},data(){return{editor:null}},mounted:function(){const comp=this;comp.editor=pell.init({element:document.getElementById(comp.id),defaultParagraphSeparator:"p",styleWithCSS:true,onChange:html=>{comp.$emit("input",html)},actions:["bold","italic","underline","heading1","ulist","olist"],classes:{actionbar:"pell-actionbar",button:"pell-btn",content:"pell-content",selected:"pell-button-selected"}});comp.editor.content.innerHTML=comp.text},watch:{text(){if(this.editor.content.innerHTML===""){this.editor.content.innerHTML=this.text}}}});Vue.component("aui-pagination",{template:`<div class="aui aui-pagination">\n        <span v-if="total">Showing {{from}} to {{to}} of {{total}} {{name}}</span>\n        <div class="aui btn-group">\n            <aui-button class="btn-secondary" @click="first()" v-if="page > 1"><i class="fa fa-arrow-left"></i></aui-button>\n            <aui-button class="btn-secondary" @click="previous()" v-if="page > 1">{{page - 1}}</aui-button>\n            <aui-button class="btn-secondary">{{page}}</aui-button>\n            <aui-button class="btn-secondary" @click="next()" v-if="page !== pages">{{page + 1}}</aui-button>\n            <aui-button class="btn-secondary" @click="last()" v-if="page !== pages"><i class="fa fa-arrow-right"></i></aui-button>\n        </div>\n    </div>`,props:{pages:{type:Number,required:true},total:{type:Number,required:true},limit:Number,name:String},data(){return{page:1,to:0,from:0}},methods:{first(){this.page=1;this.emitPage()},previous(){const previous=this.page-1;if(previous>0){this.page=previous;this.emitPage()}},next(){const next=this.page+1;if(next<=this.pages){this.page=next;this.emitPage()}},last(){this.page=this.pages;this.emitPage()},updateRange(){this.from=(this.page-1)*this.limit+1;this.to=this.from+this.limit-1;if(this.to>this.total){this.to=this.total}},emitPage(){this.updateRange();this.$emit("change",this.page)}}});